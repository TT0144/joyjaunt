services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    ports:
      - "5000:5000"
    environment:
      - FLASK_APP=app.py
      - FLASK_ENV=development
      - FLASK_RUN_HOST=0.0.0.0
    env_file:
      - ./backend/.env
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./backend:/app
      # node_modulesとpycacheを除外してパフォーマンス向上
      - /app/__pycache__
      - /app/instance
    networks:
      - app_network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "3001:3000"
    environment:
      - CHOKIDAR_USEPOLLING=true
      - HOST=0.0.0.0
      - WATCHPACK_POLLING=true
      - FAST_REFRESH=true
    env_file:
      - ./frontend/.env
    volumes:
      - ./frontend:/app
      # node_modulesを除外（ホストとコンテナで競合しないように）
      - /app/node_modules
      - /app/build
    networks:
      - app_network
    restart: unless-stopped

  db:
    image: mysql:8.0
    container_name: db
    environment:
      MYSQL_DATABASE: ${DB_NAME:-Joy}
      MYSQL_USER: ${DB_USER:-dbuser}
      MYSQL_PASSWORD: ${DB_PASSWORD:-ecc}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-root}
    volumes:
      - db_data:/var/lib/mysql
    ports:
      - "3307:3306"
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASSWORD:-root}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s
    command: --default-authentication-plugin=mysql_native_password
    restart: unless-stopped

networks:
  app_network:
    driver: bridge

volumes:
  db_data:
    driver: local
